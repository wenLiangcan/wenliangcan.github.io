<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 尹良灿得闲]]></title>
  <link href="http://wenLiangcan.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://wenLiangcan.github.io/"/>
  <updated>2014-03-14T14:29:38+08:00</updated>
  <id>http://wenLiangcan.github.io/</id>
  <author>
    <name><![CDATA[wenLiangcan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[zip 函数和 Dict Comprehension]]></title>
    <link href="http://wenLiangcan.github.io/blog/2013/12/14/zip-function-and-dict-comprehension-in-python/"/>
    <updated>2013-12-14T16:43:00+08:00</updated>
    <id>http://wenLiangcan.github.io/blog/2013/12/14/zip-function-and-dict-comprehension-in-python</id>
    <content type="html"><![CDATA[<p>要下载某个会反盗图的网站上的图片，想到了这篇 <a href="http://qixinglu.com/post/google_image_proxy.html">Google 的图片代理</a>。</p>

<p>通过 Google 来抓取想要的图片就可以逃过反盗图了，主要的工作就是为一系列原图的 url 生成特定的请求链接，所以要做的就是拼凑字符串，机械的任务当然交给机器去做了，<code>Python</code> 实现之。</p>

<p>虽然听起来挺简单，可是以我原有的知识实现起来还是有些繁琐。 需要处理的数据是存储在一个列表里的原图链接，最终想要获得的数据是一系列的文件名和与之一一对应的下载链接，第一反应当然是用字典组织它们了。 请求地址是从原链接拼凑生成的，文件名也是由原链接获得，使用 <code>os.path.basename()</code> 方法。</p>

<p>开始的想法是用两次 <code>List Comprehension</code>，遍历存储原链接的列表，获得两个分别含有文件名和下载地址的新列表，可是怎么把它们分别作为 <code>Key</code> 和 <code>Value</code> 合成为一个字典呢？我可不要循环操作下标。。。。Google 之，知道了 <code>zip</code> 函数，用法如下：
```python</p>

<blockquote><blockquote><blockquote><p>keys = ['a', 'b', 'c']
values = [1, 2, 3]
dictionary = dict(zip(keys, values))
print dictionary
{'a': 1, 'b': 2, 'c': 3}
<code>``   
</code>zip()<code>会返回一系列的元组，然后通过</code>dct()` 生成一个字典。</p></blockquote></blockquote></blockquote>

<p>可是两次遍历的都是同一个列表，难道就不能在同一次遍历中完成上面的任务吗 ("▔□▔)，好吧，原来还有 <a href="http://www.python.org/dev/peps/pep-0274/"><code>Dict Comprehension</code></a> 这个东西：</p>

<ul>
<li>如果需要遍历的 <code>sequence</code> 是一个列表，那么
<code>python
d = {l : l for l in list}
</code></li>
<li>如果 <code>sequence</code> 是一个字典
<code>python
d = {key : value for (key, value) in dictionary}
</code></li>
<li>另外，在 2.6 及一下的 <code>Python</code> 中，需要使用 <code>dict</code> 构造函数
<code>python
d = dict(... for ... in sequence)
</code></li>
</ul>


<p>再复习一下如何用 <code>for in</code> 迭代一个字典分别获取其中的键和值：
```python
for key, value in d.iteritems():</p>

<pre><code>...
</code></pre>

<p><code>``
在</code>Python 3.x<code>中使用的是</code>items()<code>,</code>Python 2.x` 中也有这个方法，不过返回的是包含一对键、值的元组。</p>

<p>最后，贴一下代码：
```python</p>

<h1>!/usr/bin/python</h1>

<p>import urllib2, sys, os</p>

<p>def inputlinks():</p>

<pre><code>if len(sys.argv) == 1:
    links = raw_input("Enter links :\n").split()
else:
    if sys.argv[1] == "-i":
        with open(sys.argv[2], 'r') as f:
            links = f.read().splitlines()
    else:
        links = sys.argv[1:]
return links
</code></pre>

<p>def generate(links):</p>

<pre><code>prefix = r"https://images2-focus-opensocial.googleusercontent.com/gadgets/proxy?url="
suffix = r"&amp;container=focus&amp;gadget=a&amp;no_expand=1&amp;resize_h=0&amp;rewriteMime=image%2F*"
images = {os.path.basename(i) : prefix + i + suffix for i in links}
return images
</code></pre>

<p>def download(images):</p>

<pre><code>for name, image in images.iteritems():
    try:
        imgdata = urllib2.urlopen(image).read()
        with open(name, 'wb') as output:
            output.write(imgdata)
    except:
        print "Er..."
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>download(generate(inputlinks()))
</code></pre>

<p>```</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://stackoverflow.com/a/4028894/1436873">How do I download a zip file in python using urllib2?</a></li>
<li><a href="http://www.cnblogs.com/cacique/archive/2012/08/02/2617440.html">Python文件读写</a></li>
<li><a href="http://stackoverflow.com/a/209854/1436873">Map two lists into a dictionary in Python</a></li>
<li><a href="http://stackoverflow.com/a/1747827/1436873">Python: create a dictionary with list comprehension</a></li>
<li><a href="http://www.python.org/dev/peps/pep-0274/">PEP 274 -- Dict Comprehensions</a></li>
<li><a href="http://stackoverflow.com/a/3294899/1436873">Iterating over Dictionaries…For Loops in Python</a></li>
<li><a href="http://qixinglu.com/post/google_image_proxy.html">Google 的图片代理</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Python] 校园网网页验证登录脚本]]></title>
    <link href="http://wenLiangcan.github.io/blog/2013/11/24/school-network-auto-login-by-python/"/>
    <updated>2013-11-24T11:14:00+08:00</updated>
    <id>http://wenLiangcan.github.io/blog/2013/11/24/school-network-auto-login-by-python</id>
    <content type="html"><![CDATA[<p>依旧毫无技术含量 =。=，走了很多弯路，很多原理也没深入学习，不过还是记录一下吧。。。</p>

<p>学校的校园网可谓关卡重重，先要锐捷验证一次，然后还要在网页端登录一次，如果一段时间没有网络活动的话又会自动下线（挂 Q 也会）。</p>

<p>之前写过一个自动填写验证码的<a href="/blog/2013/06/30/iframe-dom/">小书签</a>,后来改成了油猴脚本，让浏览器记住帐号和密码后打开浏览器就能自动登录了。</p>

<p>可是能不能把这一步也省了，开机登录桌面就能直接上网呢？ 因为有一些开机启动的程序是需要网络的。比如 <a href="http://www.go-docky.com/">Docky</a> 的天气插件，获取不到数据就会变成一个问号难看死了（主要因为强迫症，每次网页登录后都要手动点击一下 Check Weather 把那个问号变回天气图标，虽然它会定期自动检查。。。），还有就是 Dropbox，因为这个原因我一直都没设置开机启动。</p>

<p>所以就想看看能不能用 <code>Python</code> 来实现这个功能了。</p>

<p>因为对这一切都毫无概念，所以一开始只能用固有的思维方式考虑问题： 不通过浏览器，就是要用其它语言实现填写文本框然后按确认？或者通过其它语言间接调用 <code>Javascript</code> ？ 导致在这个上面绕了好久，看了半天 <a href="http://code.google.com/p/pyv8/"><code>Pyv8</code></a>, <a href="http://code.google.com/p/python-spidermonkey/"><code>Python-Spidermonkey</code></a> 什么的也没弄懂怎么回事 T<sup>T</sup></p>

<p>其实填写文本框然后按确认按钮的过程就是填写一个表单（<code>&lt;form&gt;</code>），然后浏览器把表单中的数据提交到相应服务器的过程。而 <code>Python</code> 或者其它的一些语言都已经有相应的库提供 post/submit 网页表单数据的方法了。所以现在需要做的就是找出 提交数据的地址 和 需要提交的数据项，然后使用对应的方法提交数据。</p>

<p>提交数据的地址可以由 网页文件中 <code>&lt;form&gt;</code> 标签的 <code>action</code> 属性找到。</p>

<ul>
<li>校园网的验证页面地址格式为：<code>http://address/login.jsp?wlanuserip=xxx.xx.xxx.xx&amp;wlanacip=xxx.xxx.xx.xx</code></li>
<li><code>action</code> 的值为："/login.do"</li>
<li>所以提交地址就是：<code>http://address/login.do</code></li>
</ul>


<p>提交的数据就是 <code>&lt;form&gt;</code> 里的 文本框的输入值，有 5 个。两个属性 <code>type</code> 为 "hidden" 的 <code>&lt;input&gt;</code> 标签，叫做 eduuser 和 edubas，它门的值分别对应验证页面地址中的 wlanuserip 和 wlanacip 的值，前一个是我的内网 ip 地址，后一个没搞明白是啥。</p>

<p>另外 3 个是 userName1，password1，rand，就是用户名，密码，和验证码。 其中验证码在写小书签时已经知道，它的生成方法其实是由在浏览器中的 <code>Javascript</code> 产生一个四位数字，然后向服务器请求一张相应数值的图片。</p>

<p>小书签里使用 js 获取执行结果，不过现在我要直接 post 数据并不解释网页。既然那个四位数是客户端脚本所产生的，就是说并不由服务端所控制，所以现在我可以伪造这个事实，直接由我向服务器请求一张图片，而且那个数值也不用随机生成，找一个任意确定的四位数就可以了。请求的方式是访问这样一个格式的地址：<code>http://address/common/image.jsp?rand=xxxx</code></p>

<p>其实到这里我原本的想法是，服务器应该会把对验证页面地址和验证码图片地址的访问作为同一个 session，就是服务器会记录下你请求了的图片的验证码数值，在提交表单时里面的 rand 项的值必须与之相符才能通过验证（关于 session 什么的我不太知道是不是该这么表达）。 可事实是，那个验证码图片的请求不是必须的，就是说我可以直接随便提交一个四位数作为 rand 的值也能通过验证！！！ 这个页面的验证码的部分除了那张图片，全都是由客户端 js 来完成的 Σ(っ  °Д °;)っ</p>

<p>整个脚本所做的事情就是，提交一个包含验证信息的表单。</p>

<p>```python autologin.py</p>

<h1>!/usr/bin/env python</h1>

<p>import requests, time</p>

<p>url = "http://address/login.do"
info = {'userName1': '...',</p>

<pre><code>    'password1': '...',
    'rand': '2222',
    'eduuser': '...',
    'edubas': '...'
   }
</code></pre>

<p>while True:</p>

<pre><code>requests.post(url, data = info)
time.sleep(65)
</code></pre>

<p>```</p>

<p>这里用了 <a href="http://docs.python-requests.org/en/latest/"><code>requests</code></a> 这个模块，设置每 65 秒验证一次防止自动下线（表问我为神马是 65 而不是 60）。</p>

<p>ps:</p>

<p>过程中还找到了 Firefox 的一个扩展 <a href="https://addons.mozilla.org/En-us/firefox/addon/httpfox/">HttpFox</a>，可以用来分析 HTTP 网络活动，下面是一张从访问验证页面到提交信息的记录截图： <br/>
<img src="https://dl.dropboxusercontent.com/s/47sr6ye8bu1vuxs/http.png?dl=1&amp;token_hash=AAHk_E3lc7x88hOB6t0fMSLdXRf7z5otjfQN-rbNTDahIw" alt="http" /> <br/>
通过它才发现我原本还遗漏了 eduuser 和 edubas 两个数据项。</p>

<p>另外，点击下面的 "raw"，可以看到还能通过把数据嵌入到 url 地址的方式提交表单： <br/>
<img src="https://dl.dropboxusercontent.com/s/uuhxpexkwq5bf3f/raw.png?dl=1&amp;token_hash=AAHdusJ29VHNtLIInwRFziMi6vuNlFwEkM6efKlGepcUew" alt="raw" /> <br/>
url 的格式为： <code>http://address/login.do?userName1=xxx&amp;password1=xxx&amp;rand=xxxx&amp;eduuser=xxx&amp;edubas=xxx</code></p>

<p>pps:</p>

<p>接下来打算把我的树莓派设置成路由器，用这个脚本进行验证（话说买回来没多久就闲置了 -________-''</p>

<p>还有不知要不要写成 Daemon 的形式？或者学一下写个 Systemd 的 Service 来运行？现在暂时用 Openbox 来自动执行。</p>

<p>不过还都是打算，我的拖延症又犯了。。。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.averainy.info/how-to-use-python-submit-a-web-form/">如何用python提交一个web表单</a></li>
<li><a href="http://docs.python-requests.org/en/latest/user/quickstart/">Requests Quickstart</a></li>
<li><a href="http://www.w3schools.com/tags/tag_form.asp">HTML &lt; form> Tag</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修正图片文件扩展名的 Python 脚本]]></title>
    <link href="http://wenLiangcan.github.io/blog/2013/10/18/correct-image-file-extension/"/>
    <updated>2013-10-18T16:32:00+08:00</updated>
    <id>http://wenLiangcan.github.io/blog/2013/10/18/correct-image-file-extension</id>
    <content type="html"><![CDATA[<p>有时候从往上下再下来的图片会出现扩展名与实际的图片格式不一致的情况，在 Linux 里我用 <a href="http://projects.gnome.org/eog/" title="Homepage">Eye of GNOME</a> 看图，就会因为这样而无法显示。</p>

<p>最近尝试自学 Python，查了一下相关资料后试着写了一个识别图片格式并更正扩展名的脚本。</p>

<h3>1. 识别图片格式</h3>

<p>不看扩展名如何知道一个图片文件是什么格式呢？ 网上说的比较多的是通过检查<a href="http://baike.baidu.com/view/1606305.htm">文件头</a>标志的方法来判断图片格式，可是自己写的话感觉有点麻烦。</p>

<p>其实已经有现成的轮子可以用了，就是 <code>imghdr</code> 这个模块，可以看一下它的 Docstring 的说明     <br/>
```python</p>

<blockquote><blockquote><blockquote><p>import imghdr
print imghdr.<strong>doc</strong>
Recognize image file formats based on their first few bytes.
```</p></blockquote></blockquote></blockquote>

<p>只能识别一些常见的图片格式，对一些特殊的图片文件比如 svg， psd 就无力了，不过已经满足我的需求啦。</p>

<p>用法：
<code>python
imghdr.what(&lt;image_file&gt;)
</code>
返回对应格式的扩展名字符串。</p>

<h3>2. 更正文件扩展名</h3>

<p>需要用到一些文件操作的方法，用到 <code>os</code> 这个模块，记录一下：</p>

<ul>
<li><code>os.chdir(dirname)</code>: 用于改变工作路径到 dirname。</li>
<li><code>os.listdir(dirname)</code>: 列出 dirname 下的目录和文件。</li>
<li><code>os.path.isfile(name)</code>: 判断 name 是否为文件。</li>
<li><code>os.path.splitext()</code>: 分离文件名与扩展名。</li>
<li><code>os.rename(a, b)</code>: 重命名文件。</li>
</ul>


<h3>3. 脚本</h3>

<p>```python correct-image-file-extension.py https://gist.github.com/wenLiangcan/7040164</p>

<h1>!/usr/bin/python</h1>

<p>import os, sys, imghdr</p>

<h1>允许指定文件目录，默认则检测当前目录</h1>

<p>if len(sys.argv) == 2:</p>

<pre><code>try:
    os.chdir(sys.argv[1])
except OSError, e:
    if e.errno == 2:
        print "No such file or directory: '%s'" % sys.argv[1]
</code></pre>

<p>for i in os.listdir('.'):</p>

<pre><code>if os.path.isfile(i):
    name = i
    #有时候会出现 ".png.jpg" 这样格式的扩展名，为了美观，作相应的调整。
    while os.path.splitext(os.path.splitext(name)[0])[1] != '':
        name = os.path.splitext(name)[0]
    fmt = imghdr.what(i)
    xname = os.path.splitext(name)[1][1:].lower()
    if fmt != None and fmt != xname:
        #JPEG 图片的扩展名有时会简写为 jpg，而 imghdr 里则表示为 jpeg，遇到这样的情况直接跳过不再更改。
        if fmt == 'jpeg' and xname == 'jpg':
            continue
        cn = os.path.splitext(name)[0] + '.' + fmt
        os.rename(i, cn) 
        print 'Renamed %s to %s' % (i, cn)
</code></pre>

<p>```</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://stackoverflow.com/a/902779/1436873">How to check if a file is a valid image file?</a></li>
<li><a href="http://stackoverflow.com/a/2491232/1436873">How to rename a file using Python</a></li>
<li><a href="http://www.cnblogs.com/vivilisa/archive/2009/03/01/1400968.html">python天天进步(2)--文件操作之遍历目录</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
