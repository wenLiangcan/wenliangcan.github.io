<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Arch Linux | 尹良灿得闲]]></title>
  <link href="http://wenLiangcan.github.io/blog/categories/arch-linux/atom.xml" rel="self"/>
  <link href="http://wenLiangcan.github.io/"/>
  <updated>2014-07-26T14:36:25+08:00</updated>
  <id>http://wenLiangcan.github.io/</id>
  <author>
    <name><![CDATA[wenLiangcan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IPv6 到 IPv4 的代理]]></title>
    <link href="http://wenLiangcan.github.io/blog/2014/05/18/ipv6-to-ipv4-proxy/"/>
    <updated>2014-05-18T01:30:00+08:00</updated>
    <id>http://wenLiangcan.github.io/blog/2014/05/18/ipv6-to-ipv4-proxy</id>
    <content type="html"><![CDATA[<p>为了安装 <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a> 添加了 <a href="https://wiki.archlinux.org/index.php/Unofficial_user_repositories#haskell-core">haskell-core</a> 这个仓库（<code>AUR</code> 里的包要自己编译太麻烦了），不过要用 Goagent 代理才能访问，本来以为是墙了。</p>

<p>可是问题来了，更新/安装一般的官方仓库的包时我是不希望通过代理的，所以会先注释掉 <code>pacman.conf</code> 里的 <code>haskell-core</code> 再 <code>pacman -Syu</code>，这样一来已安装的 <code>haskell</code> 包会引起依赖问题导致更新无法继续。</p>

<p>无意中想起用 <a href="http://cloudmonitor.ca.com/en/ping.php">http://cloudmonitor.ca.com/en/ping.php</a>（以前叫 just-ping.com）ping 一下这个仓库的地址（xsounds.org）看看，结果发现这货只支持通过 <code>IPv6</code> 访问！！！而我学校的网络只支持 <code>IPv4</code>。。。</p>

<p>Google 了一番后让我找到了 <a href="https://www.sixxs.net/tools/gateway/">SixXs</a> 这个服务，提供了 <code>IPv6</code> 到 <code>IPv4</code> 的代理，只要在想要访问的网址后加上 ".ipv4.sixxs.org" 这个后缀就可以了，就像这样：
<code>
xsounds.org.ipv4.sixxs.org/~haskell/core/$arch
</code>
抱着尝试的心态添加到了 <code>pacman.conf</code> 里，结果真的可用！</p>

<p>ps: 通过这样的地址下载时就看不到进度条了，原因不明。 <br/>
pps: 其实 <code>SixXs</code> 也提供了 <code>IPv4</code> 到 <code>IPv6</code> 的代理服务的，把上面的后缀换成 ".sixxs.org" 或者 ".ipv6.sixxs.org" 就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 版锐捷客户端的 PKGBUILD]]></title>
    <link href="http://wenLiangcan.github.io/blog/2014/04/01/pkgbuild-for-rjsupplicant/"/>
    <updated>2014-04-01T19:58:00+08:00</updated>
    <id>http://wenLiangcan.github.io/blog/2014/04/01/pkgbuild-for-rjsupplicant</id>
    <content type="html"><![CDATA[<p>在愚人节的今天，学校全面强制使用 4.99 版本的锐捷客户端作为上网认证，之前一直在 Arch 下默默辛勤工作的 <a href="https://code.google.com/p/mentohust/">MentoHUST</a> 就这样挂掉了。。。</p>

<p>锐捷其实也有 Linux 版的，叫做 rjsupplicant，试了一下居然能用，不用离开 Linux 回到 Windows 算是万幸，不过不出所料的无法开多网卡建 WiFi 热点了，也只好如此。</p>

<p>自从学了一下下 PKGBUILD 怎么写，无论多小的程序或脚本，不用 <code>Pacman</code> 管理就不舒服，所以这次也打了个包，文件都在<a href="https://github.com/wenLiangcan/PKGBUILD/tree/master/rjsupplicant">这里</a>。</p>

<p>安装好后输入 <code>rjsupplicant --help</code> 查看帮助，我的认证格式如下：
<code>
sudo rjsupplicant -a1 -d0 -nenp2s0 -u&lt;用户名&gt; -p&lt;密码&gt;
</code></p>

<ul>
<li>-a:   1 的话表示有线连接，0 就是无线</li>
<li>-d:   1 使用 dhcp，0 不使用</li>
<li>-n:   网卡名</li>
</ul>


<p>退出可以按 <code>q</code>。</p>

<p>打包里还有个 <code>Systemd</code> 的 service 文件，从 <code>AUR</code> 上的 <a href="https://aur.archlinux.org/packages/mentohust-bin/">mentohust-bin</a> 里修改而来。安装好后如果要启用，先打开 <code>/usr/lib/systemd/system/rjsupplicant.service</code>，在<a href="https://github.com/wenLiangcan/PKGBUILD/blob/master/rjsupplicant/rjsupplicant.service#L10">第 10 行</a>添加上上述的认证参数，想在 <code>makepkg</code> 前添加的话请记得更新 <code>PKGBUILD</code> 里对应的 <code>md5sum</code> 值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux 下搭建 MonoGame 开发环境]]></title>
    <link href="http://wenLiangcan.github.io/blog/2013/11/22/monogame-development-on-archlinux/"/>
    <updated>2013-11-22T15:11:00+08:00</updated>
    <id>http://wenLiangcan.github.io/blog/2013/11/22/monogame-development-on-archlinux</id>
    <content type="html"><![CDATA[<h4>其实就是安装几个包而已：</h4>

<p><code>bash
$ yaourt -S monodevelop-git monogame monodevelop-monogame-addin-git
</code></p>

<p>第一个是 IDE，<code>Extra</code> 仓库里的更新太慢了，还停留在 <code>4.0.13</code>，<code>MonoDevelop</code> 的稳定版现在是 <code>4.2.1</code>。</p>

<p>最后那个是 <code>MonoDevelop</code> 的 <code>MonoGame</code> 插件，有了它才能在 <code>MonoDevelop</code> 里创建 <code>MonoGame</code> 的解决方案。话说这个当初把我给搞蒙了，看<a href="https://github.com/mono/MonoGame/wiki/Tutorials%3AGetting-Started-Guide-Linux">教程</a>以为直接安装好 <code>MonoGame</code> 就可以了，看了 <a href="https://aur.archlinux.org/packages/monogame/"><code>aur</code></a> 里的评论才知道这么个东西。觉得维护者应该把它加到可选依赖里。</p>

<h4>现在试着创建一个 Solution：</h4>

<ul>
<li>在菜单栏选择 File -> New -> Solution</li>
<li><p>接着选择 C# -> MonoGame -> MonoGame Linux Application <br/>
<img src="https://dl.dropboxusercontent.com/s/rw8l51u6es27pwi/new_solution.png?dl=1&amp;token_hash=AAGKLEegUiW1nYqUbM67-AX-ZorFtbwGqsFLOQb3U2efNg" alt="" /></p></li>
<li><p>命名并保存 <br/>
<img src="https://dl.dropboxusercontent.com/s/8mkdatzfftk49pw/monogame_sln.png?dl=1&amp;token_hash=AAFMSNjCaOBtuzZPYxjAW-_N_tSRdJ8V1gsLYn_0r1ARFw" alt="" /><br/>
(编辑器的配色可以在 Edit -> Preferences -> Text Editor -> Syntax Highlighting 里设置)</p></li>
<li><p>在编译运行应用前可以把第 23 行的 <code>graphics.IsFullScreen</code> 设为 <code>false</code>，全屏运行的话会带来一些不便。 <br/>
<img src="https://dl.dropboxusercontent.com/s/l9ic9t3pwq8jifx/code.png?dl=1&amp;token_hash=AAGdbz1QdMFfZq232ndgEoiIzVujxXJDqRYi3q6r_VnKTg" alt="" /></p></li>
<li><p>按 F5 或 选择菜单 Run -> Start Debugging 启动程序 <br/>
<img src="https://dl.dropboxusercontent.com/s/rbk8w0vmc5c3upb/app.png?dl=1&amp;token_hash=AAGgKRA-3BdwOy2kQNBjvhP8f7w0DpNPzEU9PbwSSJ8jfg" alt="" /> <br/>
不太有趣 _(:3」∠)_</p></li>
</ul>


<h4>为了体验最新的特性，还可以通过 <code>MonoDevelop</code> 的 <code>VersionControl</code> 插件下载最新的 <code>MonoGame</code> 代码用来创建应用：</h4>

<p>详见：<a href="https://github.com/mono/MonoGame/wiki/Tutorials%3AGetting-Started-Guide-Linux#wiki-Getting_and_Building_the_Latest_Sources_develop3d">Getting and Building the Latest Sources (develop3d)</a> 和 <a href="https://github.com/mono/MonoGame/wiki/Tutorials%3AGetting-Started-Guide-Linux#wiki-Creating_a_MonoGame_Application_develop3d_version">Creating a MonoGame Application (develop3d version)</a></p>

<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/mono/MonoGame/wiki/Tutorials%3AGetting-Started-Guide-Linux">Tutorials:Getting Started Guide Linux</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux 下自动挂载 MTP]]></title>
    <link href="http://wenLiangcan.github.io/blog/2013/10/19/archlinux-automount-mtp/"/>
    <updated>2013-10-19T20:01:00+08:00</updated>
    <id>http://wenLiangcan.github.io/blog/2013/10/19/archlinux-automount-mtp</id>
    <content type="html"><![CDATA[<p>买了台 N7 二代，发现不支持 USB 大容量存储模式连接电脑（听说 Android 3 开始就不再支持 USB Mass Storage 协议了，不过 Defy 上刷的 CM 10 倒是可以支持，现在看来应该是第三方添加的功能了），只能以 <a href="http://en.wikipedia.org/wiki/Media_Transfer_Protocol">MTP</a> 或 <a href="http://en.wikipedia.org/wiki/Picture_Transfer_Protocol">PTP</a> 的方式连接，导致 Arch 下一直无法自动挂载只能用 Airdroid 传文件，可是用脚本生成的 Wi-Fi 会时不时的断线，传大文件时就杯具了 QAQ</p>

<p>终于让我找到了这个 <a href="https://github.com/fxthomas/android-automount">PKGBUILD 包</a>，<a href="https://github.com/fxthomas/android-automount/archive/master.zip">下载</a>下来后需要先修改一下 <code>PKGBUILD</code> 和 <code>99-android-mtp.rules</code> 这两个文件。</p>

<h3>一、</h3>

<p>首先是为你使用的设备添加相应的挂载规则。（默认的挂载规则已经加入了对 Nexus 7 一代，Galaxy Nexus 和 HP Touchpad 32GB 的支持，如果你使用的是这些设备可以跳过这一步。）</p>

<p>通过 USB 线把设备连接到电脑，在终端里输入命令：
<code>bash
$ udevadm monitor --environment --udev
</code>
然后拔出设备，就可以看到类似下面的信息：
```
monitor will print the received events for:
UDEV - the event which udev sends out after rule processing</p>

<p>UDEV  [39055.590819] remove   /devices/pci0000:00/0000:00:12.2/usb1/1-1/1-1:1.0 (usb)
ACTION=remove
DEVPATH=/devices/pci0000:00/0000:00:12.2/usb1/1-1/1-1:1.0
DEVTYPE=usb_interface
ID_MODEL_FROM_DATABASE=Nexus 4 (debug)
ID_VENDOR_FROM_DATABASE=Google Inc.
INTERFACE=255/255/0
MODALIAS=usb:v18D1p4EE2d0228dc00dsc00dp00icFFiscFFip00in00
PRODUCT=18d1/4ee2/228
SEQNUM=1985
SUBSYSTEM=usb
TYPE=0/0/0
USEC_INITIALIZED=662109</p>

<p>UDEV  [39055.592153] remove   /devices/pci0000:00/0000:00:12.2/usb1/1-1/1-1:1.1 (usb)
ACTION=remove
DEVPATH=/devices/pci0000:00/0000:00:12.2/usb1/1-1/1-1:1.1
DEVTYPE=usb_interface
ID_MODEL_FROM_DATABASE=Nexus 4 (debug)
ID_VENDOR_FROM_DATABASE=Google Inc.
INTERFACE=255/66/1
MODALIAS=usb:v18D1p4EE2d0228dc00dsc00dp00icFFisc42ip01in01
PRODUCT=18d1/4ee2/228
SEQNUM=1986
SUBSYSTEM=usb
TYPE=0/0/0
USEC_INITIALIZED=48662167</p>

<p>UDEV  [39055.661296] remove   /devices/virtual/bdi/0:41 (bdi)
ACTION=remove
DEVPATH=/devices/virtual/bdi/0:41
SEQNUM=1988
SUBSYSTEM=bdi
USEC_INITIALIZED=660985</p>

<p>UDEV  [39055.667918] remove   /devices/pci0000:00/0000:00:12.2/usb1/1-1 (usb)
ACTION=remove
BUSNUM=001
DEVLINKS=/dev/libmtp-1-1
DEVNAME=/dev/bus/usb/001/016
DEVNUM=016
DEVPATH=/devices/pci0000:00/0000:00:12.2/usb1/1-1
DEVTYPE=usb_device
ID_BUS=usb
ID_FOR_SEAT=usb-pci-0000_00_12_2-usb-0_1
ID_MEDIA_PLAYER=1
ID_MODEL=Nexus_7
ID_MODEL_ENC=Nexus\x207
ID_MODEL_FROM_DATABASE=Nexus 4 (debug)
ID_MODEL_ID=4ee2
ID_MTP_DEVICE=1
ID_PATH=pci-0000:00:12.2-usb-0:1
ID_PATH_TAG=pci-0000_00_12_2-usb-0_1
ID_REVISION=0228
ID_SERIAL=asus_Nexus_7_06e9d04d
ID_SERIAL_SHORT=06e9d04d
ID_USB_INTERFACES=:ffff00:ff4201:
ID_VENDOR=asus
ID_VENDOR_ENC=asus
ID_VENDOR_FROM_DATABASE=Google Inc.
ID_VENDOR_ID=18d1
MAJOR=189
MINOR=15
PRODUCT=18d1/4ee2/228
SEQNUM=1987
SUBSYSTEM=usb
TAGS=:seat:uaccess:
TYPE=0/0/0
USEC_INITIALIZED=48644741
<code>`
我们需要的是</code>ID_MODEL_ID<code>和</code>ID_VENDOR_ID`` 这两项等于号后面的字符串。</p>

<p>接下来编辑 <code>99-android-mtp.rules</code> 文件，仿照已有的规则和上面得到的信息添加相应的条目，比如我的是 Nexus 7 二代：
```</p>

<h1>Google Nexus 7 (Wi-Fi, 2013 version) 32GB MTP mode</h1>

<p>SUBSYSTEM=="usb", ATTR{idVendor}=="18d1", ATTR{idProduct}=="4ee1", MODE="0666" # MTP media
SUBSYSTEM=="usb", ATTR{idVendor}=="18d1", ATTR{idProduct}=="4ee2", MODE="0666" # MTP media with USB debug on</p>

<h6>#</h6>

<h1>Android devices, when unplugged</h1>

<h6>#</h6>

<h1>Nexus 7 2013</h1>

<p>ENV{ID_MODEL_ID}=="4ee1", ENV{ID_VENDOR_ID}=="18d1", ACTION=="remove", RUN+="/usr/bin/systemctl stop 'android-mtp@$env{ID_MODEL}.service'"
ENV{ID_MODEL_ID}=="4ee2", ENV{ID_VENDOR_ID}=="18d1", ACTION=="remove", RUN+="/usr/bin/systemctl stop 'android-mtp@$env{ID_MODEL}.service'"</p>

<h6>#</h6>

<h1>Android devices, when plugged-in</h1>

<h6>#</h6>

<h1>Nexus 7 2013</h1>

<p>ENV{ID_MODEL_ID}=="4ee1", ENV{ID_VENDOR_ID}=="18d1", ACTION=="add", RUN+="/usr/bin/systemctl start 'android-mtp@$env{ID_MODEL}.service'"
ENV{ID_MODEL_ID}=="4ee2", ENV{ID_VENDOR_ID}=="18d1", ACTION=="add", RUN+="/usr/bin/systemctl start 'android-mtp@$env{ID_MODEL}.service'"
<code>`
这里包含了纯 MTP 模式 和 MTP，USB debug 模式同时打开时的规则，可以在手机切换到对应的模式通过上一步骤得到相关数据。    
其中，第一部分里的</code>ATTR{idVendor}<code>对应</code>ID_VENDOR_ID<code>，</code>ATTR{idProduct}<code>对应</code>ID_MODEL_ID``。</p>

<p><code>ID_MODEL_ID</code> 除了这两种情况，在 PTP 模式，PTP 和 USB debug 模式，Bootloader 模式 还有 Recovery 模式都会有对应的数值，不过我尝试添加了 PTP 模式的规则后没能成功挂载，只好作罢。</p>

<h3>二、</h3>

<p>然后需要修改一下 <code>PKGBUILD</code> 中对应 <code>99-android-mtp.rules</code> 文件的 <code>md5</code> 值，无论你有没有进行上一步的修改，这个值都是错误的。</p>

<p>从 AUR 安装所需的依赖 <a href="https://aur.archlinux.org/packages/go-mtpfs-git/"><code>go-mtpfs-git</code></a> 和 <a href="https://aur.archlinux.org/packages/daemonize/"><code>daemonize</code></a>
<code>bash
$ yaourt -S go-mtpfs-git daemonize
</code>
打包
<code>bash
$ cd android-automount/
$ makepkg
</code>
安装
<code>bash
$ sudo pacman -U android-automount-0.1-1-any.pkg.tar.xz
</code></p>

<p>OK，现在连接你的 Android 设备到电脑上，看看 Arch 是不是成功挂载了呢~    <br/>
如果需要断开连接，只需直接拔掉数据线就好，无需手动 unmount。</p>

<h2>参考资料</h2>

<ul>
<li><a href="https://bbs.archlinux.org/viewtopic.php?id=154123">Automounting MTP devices</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
