<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Images | 尹良灿得闲]]></title>
  <link href="http://wenLiangcan.github.io/blog/categories/images/atom.xml" rel="self"/>
  <link href="http://wenLiangcan.github.io/"/>
  <updated>2014-03-14T14:37:32+08:00</updated>
  <id>http://wenLiangcan.github.io/</id>
  <author>
    <name><![CDATA[wenLiangcan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[zip 函数和 Dict Comprehension]]></title>
    <link href="http://wenLiangcan.github.io/blog/2013/12/14/zip-function-and-dict-comprehension-in-python/"/>
    <updated>2013-12-14T16:43:00+08:00</updated>
    <id>http://wenLiangcan.github.io/blog/2013/12/14/zip-function-and-dict-comprehension-in-python</id>
    <content type="html"><![CDATA[<p>要下载某个会反盗图的网站上的图片，想到了这篇 <a href="http://qixinglu.com/post/google_image_proxy.html">Google 的图片代理</a>。</p>

<p>通过 Google 来抓取想要的图片就可以逃过反盗图了，主要的工作就是为一系列原图的 url 生成特定的请求链接，所以要做的就是拼凑字符串，机械的任务当然交给机器去做了，<code>Python</code> 实现之。</p>

<p>虽然听起来挺简单，可是以我原有的知识实现起来还是有些繁琐。 需要处理的数据是存储在一个列表里的原图链接，最终想要获得的数据是一系列的文件名和与之一一对应的下载链接，第一反应当然是用字典组织它们了。 请求地址是从原链接拼凑生成的，文件名也是由原链接获得，使用 <code>os.path.basename()</code> 方法。</p>

<p>开始的想法是用两次 <code>List Comprehension</code>，遍历存储原链接的列表，获得两个分别含有文件名和下载地址的新列表，可是怎么把它们分别作为 <code>Key</code> 和 <code>Value</code> 合成为一个字典呢？我可不要循环操作下标。。。。Google 之，知道了 <code>zip</code> 函数，用法如下：
```python</p>

<blockquote><blockquote><blockquote><p>keys = ['a', 'b', 'c']
values = [1, 2, 3]
dictionary = dict(zip(keys, values))
print dictionary
{'a': 1, 'b': 2, 'c': 3}
<code>``   
</code>zip()<code>会返回一系列的元组，然后通过</code>dct()` 生成一个字典。</p></blockquote></blockquote></blockquote>

<p>可是两次遍历的都是同一个列表，难道就不能在同一次遍历中完成上面的任务吗 ("▔□▔)，好吧，原来还有 <a href="http://www.python.org/dev/peps/pep-0274/"><code>Dict Comprehension</code></a> 这个东西：</p>

<ul>
<li>如果需要遍历的 <code>sequence</code> 是一个列表，那么
<code>python
d = {l : l for l in list}
</code></li>
<li>如果 <code>sequence</code> 是一个字典
<code>python
d = {key : value for (key, value) in dictionary}
</code></li>
<li>另外，在 2.6 及一下的 <code>Python</code> 中，需要使用 <code>dict</code> 构造函数
<code>python
d = dict(... for ... in sequence)
</code></li>
</ul>


<p>再复习一下如何用 <code>for in</code> 迭代一个字典分别获取其中的键和值：
```python
for key, value in d.iteritems():</p>

<pre><code>...
</code></pre>

<p><code>``
在</code>Python 3.x<code>中使用的是</code>items()<code>,</code>Python 2.x` 中也有这个方法，不过返回的是包含一对键、值的元组。</p>

<p>最后，贴一下代码：
```python</p>

<h1>!/usr/bin/python</h1>

<p>import urllib2, sys, os</p>

<p>def inputlinks():</p>

<pre><code>if len(sys.argv) == 1:
    links = raw_input("Enter links :\n").split()
else:
    if sys.argv[1] == "-i":
        with open(sys.argv[2], 'r') as f:
            links = f.read().splitlines()
    else:
        links = sys.argv[1:]
return links
</code></pre>

<p>def generate(links):</p>

<pre><code>prefix = r"https://images2-focus-opensocial.googleusercontent.com/gadgets/proxy?url="
suffix = r"&amp;container=focus&amp;gadget=a&amp;no_expand=1&amp;resize_h=0&amp;rewriteMime=image%2F*"
images = {os.path.basename(i) : prefix + i + suffix for i in links}
return images
</code></pre>

<p>def download(images):</p>

<pre><code>for name, image in images.iteritems():
    try:
        imgdata = urllib2.urlopen(image).read()
        with open(name, 'wb') as output:
            output.write(imgdata)
    except:
        print "Er..."
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>download(generate(inputlinks()))
</code></pre>

<p>```</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://stackoverflow.com/a/4028894/1436873">How do I download a zip file in python using urllib2?</a></li>
<li><a href="http://www.cnblogs.com/cacique/archive/2012/08/02/2617440.html">Python文件读写</a></li>
<li><a href="http://stackoverflow.com/a/209854/1436873">Map two lists into a dictionary in Python</a></li>
<li><a href="http://stackoverflow.com/a/1747827/1436873">Python: create a dictionary with list comprehension</a></li>
<li><a href="http://www.python.org/dev/peps/pep-0274/">PEP 274 -- Dict Comprehensions</a></li>
<li><a href="http://stackoverflow.com/a/3294899/1436873">Iterating over Dictionaries…For Loops in Python</a></li>
<li><a href="http://qixinglu.com/post/google_image_proxy.html">Google 的图片代理</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
